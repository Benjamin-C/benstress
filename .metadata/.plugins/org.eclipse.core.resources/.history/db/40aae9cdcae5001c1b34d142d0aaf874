/* Ben's CPU stress tester
 *
 * This only works on Linux. If you don't use Linux, start
 * 		(or just use someone else's tester)
 *
 */

#include <stdio.h>
#include <thread>
#include <atomic>
#include <chrono>
#include <string.h>
#include <signal.h>
#include <iostream>
#include <fstream>
#include <string>

using namespace std;

static atomic<bool> go;
static atomic<long> runtime;
static atomic<int> runningThreads;
static atomic<long> starttime;

static int nopleaseactuallydoit;

void stress(long param) {
	printf("Stressing %g... ", (double) param);
	int x = 1;
	int y = 1;
	for(long i = 0; i < param; i++) {
		x += y + 1;
		y += x - ((i+1) * y);
	}
	nopleaseactuallydoit = x + y;
}

double getCPUspeed() {
	string line;
	ifstream myfile ("/proc/cpuinfo");
	if (myfile.is_open()) {
//		printf("I am on CPU %d\n", sched_getcpu());
		while(getline(myfile,line)) {
			if(line.rfind("processor", 0) == 0) {
				const char* r = line.c_str();
				while(*r++ != ':') { }
				int cpuid;
				sscanf(++r, "%d", &cpuid);
				if(cpuid == sched_getcpu()) {
//					printf("That's me!\n");
					while(getline(myfile,line)) {
						if (line.rfind("cpu MHz", 0) == 0) { // pos=0 limits the search to the prefix
							r = line.c_str();
							while(*r++ != ':') { }
							double speed;
							sscanf(++r, "%lf", &speed);
							speed *= 1e6;
//							printf("%.0fHz\n", speed);
							return speed;
						}
					}
				}
			}
		}
		myfile.close();
	}
	return 0;
}

long millis() {
	return chrono::duration_cast<chrono::milliseconds>(chrono::system_clock::now().time_since_epoch()).count();
}

void stressTask(int id, int runs, long stressparam, bool print) {
	runningThreads++;
	if(print) {
		printf("[%d] I stress you!\n", id);
	}
	int num;
	long sum;
	bool forever = false;
	if(runs == 0) {
		forever = true;
	}
	while(go && (runs-- >= 0 || forever)) {
		auto start = chrono::high_resolution_clock::now();
		stress(stressparam);
		auto elapsed = chrono::high_resolution_clock::now() - start;
		long microseconds = chrono::duration_cast<chrono::microseconds>(elapsed).count();
		sum += microseconds;
		num++;
		if(print) {
			long stime = millis() - starttime;
			printf("%ld\t%2d\t%.6lf\t%.0lf\n", stime, id, microseconds / 1e6, getCPUspeed());
		}
	}
	long dur = sum / num;
	runtime += dur;
	runningThreads--;
	if(print) {
		printf("[% 2d] All done! %.6lf\n", id, (dur / 1e6));
	}
}

const char* PREFIX_LETTERS = " kMGTPE";
char prefix(long num) {
	int ct = 0;
	long tn = num;
	while(tn >= 1000) {
		tn /= 1000;
		ct++;
	}

//	printf("%ld %d\n", tn, ct);
	return PREFIX_LETTERS[ct];
}

void makePrefix(long num, char* str) {
	int ct = 0;
	double tn = num;
	while(tn >= 1000) {
		tn /= 1000;
		ct++;
	}
	if(tn < 10) {
		sprintf(str, "%.1f", tn);
	} else {
		sprintf(str, "%.0f", tn);
	}
	char* h = str;
	while(*++h != 0) { }
	*h++ = PREFIX_LETTERS[ct];
	*h = 0;
//	printf("..>%s<..\n", str);
}

void signal_callback_handler(int signum) {
   printf("Stopping ... \n");
   go = false;
}

int main(int argc, char* argv[]) {
	getCPUspeed();
	int threadCount = 1;
	long param = 4.1234e8;
	int runs = 0;
	bool verbose = false;

	for(int i = 1; i < argc; i++) {
		if(argv[i][0] == '-') {
			if(i+1 < argc){ // Stuff that has a paramater
				switch(argv[i][1]) {
				case 't': {
					sscanf(argv[i+1], "%d", &threadCount);
				} break;
				case 'p': {
					double temp;
					sscanf(argv[i+1], "%lf", &temp);
					param = (long) temp;
				} break;
				case 'r': {
					sscanf(argv[i+1], "%d", &runs);
				} break;
				default: break; // Do nothing if we don't know what to do
				}
			}
			switch(argv[i][1]) { // Stuff without a paramater
			case 'v': {
				verbose = true;
			} break;
			case 'h': {
				printf("No help for you!");
				return(0);
			}
			default: break; // Do nothing if we don't know what to do
			}
		}
	}
	signal(SIGINT, signal_callback_handler);
	starttime = millis();
	time_t end_time = chrono::system_clock::to_time_t(chrono::system_clock::now());
	printf("Started at %s\n", ctime(&end_time));

	char rcts[9];
	makePrefix(param, rcts);

	printf("Testing on %d thread%s",
			threadCount, (threadCount > 1) ? "s " : " ");
	if(runs > 0) {
		printf("for %d run%s", runs, (runs > 0) ? "s " : " ");
	}
	printf("with %s iterations per run\n", rcts);

	go = true;
	std::thread threads[threadCount];
	for(int i = 0; i < threadCount; i++) {
		threads[i] = std::thread(stressTask, i, runs, param, verbose);
	}

	while(runningThreads < threadCount) { }

	printf("Stressing ... !\n");

	for(int i = 0; i < threadCount; i++) {
		threads[i].join();
	}

	double avgt = (runtime / threadCount) / 1e6 ;

	printf("Average time: %.6lf seconds\n", avgt);
	printf("Your magic number is %d\n", nopleaseactuallydoit);
	printf("All cleaned up\n");

	cout << "Test\n";
	return 0;
}
