/* BenStress - A simple stress test to stress your computer.
 * 
 * This program does some arbitrary math a bunch of times to stress your CPU and see what it does.
 * Tuning parameters can be passed as command line inputs
 * The average time for each stress test is printed at the end, and optionally the time each
 * 		test took to run as well as the CPU speed at the end can be printed to the console.
 */

package dev.orangeben;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class BenStress {
	
	// Number of running threads
	private static volatile int runningThreads = 0;
	// If the threads should keep going or not, used to stop early
	private static volatile boolean go;
	// The time the test was started at
	private static volatile long starttime;
	// The amount of time taken to run the tests
	private static volatile long runtime;
	// Indicates if the program finished before the shutdown signal was sent
	private static volatile boolean doneSignal = false;
	// Lets the shutdown thread wait until the main thread is done before shuttind down
	private static volatile Object shutdownWaiter;
	
	public static void main(String[] args) {
		// Tuning parameters
		int threadCount = 4; 			// Number of threads to run
		long param = (long) 4.1234e8;	// Stress paramater controlling length of each test
		int runs = 0;					// The number of test runs to do 0=infinite
		boolean verbose = false;		// To print verbose output or not
		
		// Parse args
		for(int i = 0; i < args.length; i++) {
			if(args[i].charAt(0) == '-') {
				if(i+1 < args.length){ // Flags that has a parameter
					System.out.println("c: " + args[i].charAt(1));
					switch(args[i].charAt(1)) {
					case 't': {
						threadCount = Integer.parseInt(args[i+1]);
					} break;
					case 'p': {
						param = (long) Double.parseDouble(args[i+1]);
					} break;
					case 'r': {
						runs = Integer.parseInt(args[i+1]);
					} break;
					default: break; // Do nothing if we don't know what to do with this flag
					}
				}
				switch(args[i].charAt(1)) { // Flags without a parameter
				case 'v': {
					verbose = true;
				} break;
				case 'h': {
					System.out.println("BenStress (Java) - Stress your computer!");
					System.out.println("Usage: java -jar benstress.jar -t 4 -c 8 -p 2e8 -v");
					System.out.println("\tRun the stress test with 4 threads, 8 itterations per thread,");
					System.out.println("\ta stress paramater of 2x10^8 and verbose output");
					System.out.println("Options:");
					System.out.println("\tt: The number of threads to spawn. Defaults to 4");
					System.out.println("\tc: The number of times to run the test. Use 0 to run forever and");
					System.out.println("\t   ctl+c to stop. Defaults to 5");
					System.out.println("\tp: The stress paramater. Defaults to 4.123e8");
					System.out.println("\tv: Print each result to sysout rather than just the final average");
					return;
				}
				default: break; // Do nothing if we don't know what to do
				}
			}
		}
		// Listen for ctl+c to cleanly shut down
		shutdownWaiter = new Object();
		Runtime.getRuntime().addShutdownHook(new Thread() {
			public void run() {
				try {
					if(!doneSignal) {
						System.out.println("Stopping ...");
						go = false;
						doneSignal = true;
						synchronized(shutdownWaiter) {
							shutdownWaiter.wait();
						}
					}
				} catch (InterruptedException e) {
					Thread.currentThread().interrupt();
					e.printStackTrace();
				}
			}
		});
		
		starttime = System.currentTimeMillis();
		System.out.printf("Started at %s\n", java.time.LocalDateTime.now());

		String rcts = makePrefix(param);

		System.out.printf("Testing on %d thread%s", threadCount, (threadCount > 1) ? "s " : " ");
		if(runs > 0) {
			System.out.printf("for %d run%s", runs, (runs > 0) ? "s " : " ");
		}
		System.out.printf("with %s iterations per run\n", rcts);

		go = true;
		Thread threads[] = new Thread[threadCount];
		for(int i = 0; i < threadCount; i++) {
			final int id = i;
			final int r = runs;
			final long p = param;
			final boolean v = verbose;
			threads[i] = new Thread() {
				@Override
				public void run() {
					stressTask(id, r, p, v);
				}
			};
			threads[i].start();
		}
		
		while(runningThreads < threadCount) {
			try {
				Thread.sleep(1);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		};

		System.out.printf("Stressing ... !\n");

		for(int i = 0; i < threadCount; i++) {
			try {
				threads[i].join();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}

		double avgt = (runtime / threadCount) / 1e6 ;

		System.out.printf("Average time: %.6f seconds\n", avgt);
		System.out.printf("All cleaned up\n");
		if(doneSignal) {
			synchronized (shutdownWaiter) {
				shutdownWaiter.notify();
			}
		} else {
			doneSignal = true;
		}
	}
	
	private static String makePrefix(long param) {
		return Long.toString(param);
	}
	
	private static void stressTask(int id, int runs, long stressparam, boolean print) {
		runningThreads++;
		if(print) {
			System.out.printf("[%d] I stress you!\n", id);
		}
		int num = 0;
		long sum = 0;
		boolean forever = false;
		if(runs == 0) {
			forever = true;
		}
		while(go && (runs-- >= 0 || forever)) {
			long start = System.nanoTime();
			stress(stressparam);
			long end = System.nanoTime();
			long microseconds = (end - start) / 1000;
			sum += microseconds;
			num++;
			if(print) {
				long stime = System.currentTimeMillis() - starttime;
				System.out.printf("%d\t%d\t%.6f\t%.0f\n", stime, id, microseconds / 1e6, getCPUspeed());
			}
		}
		long dur = sum / num;
		runtime += dur;
		runningThreads--;
		if(print) {
			System.out.printf("[% 2d] All done! %.6f\n", id, (dur / 1e6));
		}
	}
	
	public static double getCPUspeed() {
		return getCPUspeed(-1);
	}
	/**
	 * Gets the current speed of the CPU. If cid is specified >= 0, the speed of that core will be returned if that core exists.
	 * Otherwise, the average speed will be returned.
	 * @param cid the int ID of the core to measure. Use -1 for average speed
	 * @return The double speed of the core / average in Hz, or 0 if something went wrong
	 */
	public static double getCPUspeed(int cid) {
		try {
			File cpuinfo = new File("/proc/cpuinfo");
			Scanner myReader = new Scanner(cpuinfo);
			while (myReader.hasNextLine()) {
				String data = myReader.nextLine();
				if(cid >= 0) {
					if(data.contains("processor	:")) {
						try {
							int cpuid = Integer.parseInt(data.split(": ")[1]);
							if(cpuid == cid) {
								while (myReader.hasNextLine()) {
									data = myReader.nextLine();
									if(data.contains("cpu MHz		:")) {
										double hz = Double.parseDouble(data.split(": ")[1]) * 1e6;
										myReader.close();
										return hz;
									}
								}
							}
						} catch(Exception e) {
							e.printStackTrace();
						}
					}
				} else {
					double spd = 0;
					int ct = 0;
					while (myReader.hasNextLine()) {
						data = myReader.nextLine();
						if(data.contains("cpu MHz		:")) {
							double hz = Double.parseDouble(data.split(": ")[1]) * 1e6;
							spd += hz;
							ct++;
						}
					}
					myReader.close();
					return spd / ct;
				}
			}
			myReader.close();
			return 0;
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		return 0;
	}
	
	private static void stress(long param) {
		int x = 1;
		int y = 1;
		for(long i = 0; i < param; i++) {
			x += y + 1;
			y += x - ((i+1) * y);
		}
	}
}
